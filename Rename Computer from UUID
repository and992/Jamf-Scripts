#!/bin/bash

#The API user need "Read Computers" permision

# Define the Jamf Pro Server URL
jssURL=https://jssURL.jamfcloud.com:443

# Define the client ID and client secret
client_id=ID
client_secret=secret

# Obtain OAuth Access Token
access_token_full=$(curl --location --request POST "$jssURL/api/oauth/token" \
--header 'Content-Type: application/x-www-form-urlencoded' \
--data-urlencode "client_id=$client_id" \
--data-urlencode 'grant_type=client_credentials' \
--data-urlencode "client_secret=$client_secret")

# Extract the access token from the response
access_token=$(echo "$access_token_full" | awk -F'"' '{print $4}')
echo "Access token: $access_token"

# Retrieve the UUID of the Computer
UUID=$(ioreg -rd1 -c IOPlatformExpertDevice | awk -F'"' '/IOPlatformUUID/{print $4}')
echo "UUID: $UUID"

# Fetch Computer Details from Jamf Pro
response=$(curl -s -H "Accept: text/xml" -H "Authorization: Bearer $access_token" "${jssURL}/JSSResource/computers/udid/${UUID}/subset/general")

# Extract Asset Tag from the response
asset_tag=$(echo "$response" | xmllint --xpath 'string(//computer/general/asset_tag)' -)

# If asset_tag is empty, fetch the serial number
if [ -z "$asset_tag" ]; then
  serial_number=$(system_profiler SPHardwareDataType | grep "Serial Number" | awk -F ": " '{print $2}')
  echo "Asset Tag not found, using Serial Number: $serial_number"
  
  # Set the computer name, host name, and local host name to serial number
  scutil --set ComputerName "$serial_number"
  scutil --set HostName "$serial_number"
  scutil --set LocalHostName "$serial_number"
  
  echo "ComputerName, HostName, and LocalHostName have been set to Serial Number: $serial_number"
else
  # Set the computer name, host name, and local host name to asset tag
  scutil --set ComputerName "$asset_tag"
  scutil --set HostName "$asset_tag"
  scutil --set LocalHostName "$asset_tag"
  
  echo "Asset Tag: $asset_tag"
  echo "ComputerName, HostName, and LocalHostName have been set to $asset_tag"
fi

# Flush the DNS cache
dscacheutil -flushcache

# Trigger Jamf policy to update inventory
/usr/local/jamf/bin/jamf policy -trigger update-inventory

# Invalidate the OAuth Token
invalidate_response=$(curl --location --request POST "$jssURL/api/oauth/invalidate" \
--header "Authorization: Bearer $access_token")
echo "Invalidate response: $invalidate_response"
